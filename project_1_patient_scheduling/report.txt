Question1
Describe the state representation and the operators.

Each state is represented as a list of patients with a certain current waiting time, remaining 
consult time and maximum waiting time. 

The operator is attributing a doctor to a patient on a certain time slot("attending" the patient).


Question 2
Identify the method used for the search algorithm. Justify the choice.

The used method is A*, which is better than blind or uninformed search, since it substantially reduces 
the branching factor and search time, while remaining optimal and complete in a tree-search
if the heuristic satisfies some properties.
 
Question 3
Does the chosen algorithm guarantee the optimal solution? Justify.

If h(n) is admissible, the solution returned by A* is optimal.
The heuristic function h(N) of node N is admissible if: 0 < h(N) < h*(N),  for all N, where h*(N) 
is the true cost from node N to the solution.

In the heuristic calculations we simulate the goal node cost without overstimating it, this is, 
we guarantee that it is always smaller than the true goal node cost.

In this "simulation" we always attend the patients with the biggest current waiting time first and 
attend them without considering the remaining consult time, this is, regardless of the remaining
consultation time, the patient is attended in one slot. It is also considered as problem 
relaxations that all the doctors have efficiency 1 and the maximum waiting times don't need to be respected...
The patients that are not attended have the current waiting time increased by 5, as usual.

Putting this into a formula:
    h(N)=path_cost(SimulationGoalNode)-path_cost(N)

If there is no solution, path_cost(simulationGoalNode)<path_cost(GoalNode), as it is 
not considered in our simulation that the maximum waiting time is ever surpassed, so the 
simulationGoalNode heuristic will never be infinity, even if there is no solution.

If there is a solution, h(N)<h*(N), since the patients with the biggest current waiting time are 
attended first and in just one slot. 
The relaxation of attending the patients in one slot, regardless of their
remainig consultation time guarantees that we do not incur in the problem of while attending the patient 
with a bigger current waiting time, increasing the current waiting time of another client by an amount
that would not compensate.
This is, in a optimal solution there is the possibility of 
not always the  patient with the biggest waiting time being the one attended since if a client 
with a smaller waiting time and a smaller remaining consultation time will reach 0 consultation time faster 
and  stop increasing his current waiting time. With this relaxation we do not incur in the problem of
overstimating the path cost of the goal node in this situation.

Also by attending the patients with the biggest current waiting time first, we guarantee that the
squared sum of the waiting times will be least possible, this is the path_cost will be the least possible.

Therefore path_cost(SimulationGoalNode)<path_cost(GoalNode) and:
 
    path_cost(SimulationGoalNode)<path_cost(GoalNode),
    path_cost(SimulationGoalNode)-path_cost(N)<path_cost(GoalNode)-path_cost(N),
    h(N) < h*(N) 
    
 , so our heuristic is admissible.

Question 4
Determine the number of generated nodes, the depth of the solution, and the effective branching factor, 
for each one of the example files provided at the course webpage.

The effective branching factor b* is defined by n = 1 + b* + (b*)2 +...+ (b*)d.

PUBTEST1: # of generated nodes = 14, sol depth = 6, effective branching factor = 1.226
PUBTEST2: No Solution
PUBTEST3: # of generated nodes = 11, sol depth = 3, effective branching factor = 1.737
PUBTEST4: # of generated nodes = 6651, sol depth = 9, effective branching factor = 2.514
PUBTEST5: # of generated nodes = 4178, sol depth = 9, effective branching factor = 2.377
PUBTEST6: # of generated nodes = 2571, sol depth = 6, effective branching factor =3.500
PUBTEST7: # of generated nodes = 943, sol depth = 6, effective branching factor = 2.920
PUBTEST8: # of generated nodes = 1003, sol depth = 4, effective branching factor = 5.344